/*
 * LazyGalleryMaker.java
 *
 * Created on Jul 1, 2009, 8:55:37 AM
 *
 * Copyright: Scott Douglass <scott@swdouglass.com>.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * on the World Wide Web for more details:
 * http://www.fsf.org/licensing/licenses/gpl.txt
 */
package com.spacepirates.gallery;

import com.spacepirates.swing.chooser.ImageChooser;
import java.io.File;
import javax.swing.JFileChooser;

/**
 *
 * @author scott
 */
public class LazyGalleryMaker extends javax.swing.JFrame {

  private ImageChooser imageSourceChooser;
  private Boolean useThreads = false;
  private Boolean useLowerCase = false;
  private ImageGallery imageGallery = new ImageGallery();
  private Boolean rotateImages = false;

  /** Creates new form LazyGalleryMaker */
  public LazyGalleryMaker() {
    initComponents();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    imageDirectoryLabel = new javax.swing.JLabel();
    imageDirectoryButton = new javax.swing.JButton();
    imageDirectoryTextField = new javax.swing.JTextField();
    createGalleryButton = new javax.swing.JButton();
    messagesScrollPane = new javax.swing.JScrollPane();
    messagesTextArea = new javax.swing.JTextArea();
    useThreadsCheckBox = new javax.swing.JCheckBox();
    lowercaseCheckBox = new javax.swing.JCheckBox();
    cancelButton = new javax.swing.JButton();
    autoRotateCheckBox = new javax.swing.JCheckBox();
    menuBar = new javax.swing.JMenuBar();
    fileMenu = new javax.swing.JMenu();
    openMenuItem = new javax.swing.JMenuItem();
    saveMenuItem = new javax.swing.JMenuItem();
    saveAsMenuItem = new javax.swing.JMenuItem();
    exitMenuItem = new javax.swing.JMenuItem();
    editMenu = new javax.swing.JMenu();
    cutMenuItem = new javax.swing.JMenuItem();
    copyMenuItem = new javax.swing.JMenuItem();
    pasteMenuItem = new javax.swing.JMenuItem();
    deleteMenuItem = new javax.swing.JMenuItem();
    helpMenu = new javax.swing.JMenu();
    contentsMenuItem = new javax.swing.JMenuItem();
    aboutMenuItem = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    imageDirectoryLabel.setText("Images:");

    imageDirectoryButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/spacepirates/swing/chooser/Open16.gif"))); // NOI18N
    imageDirectoryButton.setToolTipText("");
    imageDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        imageDirectoryButtonActionPerformed(evt);
      }
    });

    imageDirectoryTextField.setText("/Users/scott/work/pictures/Canon-PowerShot_S2_IS/140CANON");
    imageDirectoryTextField.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        imageDirectoryTextFieldActionPerformed(evt);
      }
    });

    createGalleryButton.setText("Create Gallery");
    createGalleryButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        createGalleryButtonActionPerformed(evt);
      }
    });

    messagesTextArea.setColumns(20);
    messagesTextArea.setRows(5);
    messagesScrollPane.setViewportView(messagesTextArea);

    useThreadsCheckBox.setText("Use Threads?");
    useThreadsCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        useThreadsCheckBoxActionPerformed(evt);
      }
    });

    lowercaseCheckBox.setText("Lowercase File Names?");
    lowercaseCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        lowercaseCheckBoxActionPerformed(evt);
      }
    });

    cancelButton.setText("Cancel");
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancelButtonActionPerformed(evt);
      }
    });

    autoRotateCheckBox.setText("Auto Rotate?");
    autoRotateCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        autoRotateCheckBoxActionPerformed(evt);
      }
    });

    fileMenu.setText("File");

    openMenuItem.setText("Open");
    fileMenu.add(openMenuItem);

    saveMenuItem.setText("Save");
    fileMenu.add(saveMenuItem);

    saveAsMenuItem.setText("Save As ...");
    fileMenu.add(saveAsMenuItem);

    exitMenuItem.setText("Exit");
    exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        exitMenuItemActionPerformed(evt);
      }
    });
    fileMenu.add(exitMenuItem);

    menuBar.add(fileMenu);

    editMenu.setText("Edit");

    cutMenuItem.setText("Cut");
    editMenu.add(cutMenuItem);

    copyMenuItem.setText("Copy");
    editMenu.add(copyMenuItem);

    pasteMenuItem.setText("Paste");
    editMenu.add(pasteMenuItem);

    deleteMenuItem.setText("Delete");
    editMenu.add(deleteMenuItem);

    menuBar.add(editMenu);

    helpMenu.setText("Help");

    contentsMenuItem.setText("Contents");
    helpMenu.add(contentsMenuItem);

    aboutMenuItem.setText("About");
    helpMenu.add(aboutMenuItem);

    menuBar.add(helpMenu);

    setJMenuBar(menuBar);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(messagesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
              .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addComponent(useThreadsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 105, Short.MAX_VALUE)
                .addComponent(createGalleryButton))
              .addGroup(layout.createSequentialGroup()
                .addComponent(imageDirectoryLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imageDirectoryTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(imageDirectoryButton))
          .addComponent(cancelButton, javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(autoRotateCheckBox)
          .addComponent(lowercaseCheckBox))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(19, 19, 19)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(imageDirectoryLabel)
          .addComponent(imageDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(imageDirectoryButton))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(useThreadsCheckBox)
          .addComponent(createGalleryButton))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(lowercaseCheckBox)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(autoRotateCheckBox)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
        .addComponent(messagesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(cancelButton)
        .addGap(7, 7, 7))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
      System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void imageDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageDirectoryButtonActionPerformed
      if (imageSourceChooser == null) {
        imageSourceChooser = new ImageChooser();
      }

      int returnVal = imageSourceChooser.showDialog(LazyGalleryMaker.this,
              "Select image directory");

      if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = imageSourceChooser.getCurrentDirectory();
        this.imageDirectoryTextField.setText(file.getPath());
      }
      imageSourceChooser.setSelectedFile(null);
    }//GEN-LAST:event_imageDirectoryButtonActionPerformed

    private void imageDirectoryTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageDirectoryTextFieldActionPerformed
      // TODO add your handling code here:
    }//GEN-LAST:event_imageDirectoryTextFieldActionPerformed

    private void createGalleryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createGalleryButtonActionPerformed
      imageGallery = new ImageGallery();
      imageGallery.setGalleryRoot("/");
      imageGallery.setLowerCaseNames(useLowerCase);
      imageGallery.setRotateImages(rotateImages);
      imageGallery.init(this.imageDirectoryTextField.getText(), 6, true, useThreads);
      StringBuilder sb = new StringBuilder();
      for (String message : imageGallery.getMessages()) {
        sb.append(message);
        sb.append("\n");
      }
      this.messagesTextArea.setText(sb.toString());
    }//GEN-LAST:event_createGalleryButtonActionPerformed

    private void useThreadsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useThreadsCheckBoxActionPerformed
      if (useThreads) {
        useThreads = false;
      } else {
        useThreads = true;
      }
    }//GEN-LAST:event_useThreadsCheckBoxActionPerformed

    private void lowercaseCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowercaseCheckBoxActionPerformed
      if (useLowerCase) {
        useLowerCase = false;
      } else {
        useLowerCase = true;
      }
    }//GEN-LAST:event_lowercaseCheckBoxActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
      ImageGallery.setStopRequested(true);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void autoRotateCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoRotateCheckBoxActionPerformed
      if (rotateImages) {
        rotateImages = false;
      } else {
        rotateImages = true;
      }

    }//GEN-LAST:event_autoRotateCheckBoxActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {

      @Override
      public void run() {
        new LazyGalleryMaker().setVisible(true);
      }
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem aboutMenuItem;
  private javax.swing.JCheckBox autoRotateCheckBox;
  private javax.swing.JButton cancelButton;
  private javax.swing.JMenuItem contentsMenuItem;
  private javax.swing.JMenuItem copyMenuItem;
  private javax.swing.JButton createGalleryButton;
  private javax.swing.JMenuItem cutMenuItem;
  private javax.swing.JMenuItem deleteMenuItem;
  private javax.swing.JMenu editMenu;
  private javax.swing.JMenuItem exitMenuItem;
  private javax.swing.JMenu fileMenu;
  private javax.swing.JMenu helpMenu;
  private javax.swing.JButton imageDirectoryButton;
  private javax.swing.JLabel imageDirectoryLabel;
  private javax.swing.JTextField imageDirectoryTextField;
  private javax.swing.JCheckBox lowercaseCheckBox;
  private javax.swing.JMenuBar menuBar;
  private javax.swing.JScrollPane messagesScrollPane;
  private javax.swing.JTextArea messagesTextArea;
  private javax.swing.JMenuItem openMenuItem;
  private javax.swing.JMenuItem pasteMenuItem;
  private javax.swing.JMenuItem saveAsMenuItem;
  private javax.swing.JMenuItem saveMenuItem;
  private javax.swing.JCheckBox useThreadsCheckBox;
  // End of variables declaration//GEN-END:variables
}
